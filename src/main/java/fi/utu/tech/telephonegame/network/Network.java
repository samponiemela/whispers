package fi.utu.tech.telephonegame.network;
import java.io.IOException;
import java.io.Serializable;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Enumeration;

/**
 * Do not edit this file.
 * Älä muokkaa tätä tiedostoa.
 */

import java.util.concurrent.TransferQueue;

public interface Network {

	/**
	 * An utility function to get list of public IP addresses - used by the resolver and GUI
	 * @return List of IPv4 addresses this computer currently has (excl. localhost)
	 */
	public static ArrayList<String> getIPs() {
		ArrayList<String> result = new ArrayList<String>();
		try {
			Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
			while (interfaces.hasMoreElements()) {
				NetworkInterface n = (NetworkInterface) interfaces.nextElement();
				Enumeration<InetAddress> inetAddresses = n.getInetAddresses();
				while (inetAddresses.hasMoreElements()) {
					InetAddress inet = (InetAddress) inetAddresses.nextElement();
					if (!(inet instanceof Inet6Address) && !inet.isLoopbackAddress() && !inet.isLinkLocalAddress()) {
						result.add(inet.getHostAddress());
					}

				}
			}
		} catch (SocketException e) {
			e.printStackTrace();
		}
		return result;
	}

	/**
	 * Start listening listening for new peers
	 * @param serverPort The port to listen to new peers
	 */
	public void startListening(int serverPort);

	/**
	 * Establish a connection to another peer
	 * @param clientIP The IP address to connect to
	 * @param clientPort The port to connect to
	 * @throws IOException
	 * @throws UnknownHostException
	 */
	public void connect(String clientIP, int clientPort) throws IOException, UnknownHostException;

	/**
	 * Add an object to the queue for sending it to the peer network
	 * 
	 * @param outMessage The Serializable object to be sent
	 */
	public void postMessage(Serializable out);

	/**
	 * Get reference to the queue containing incoming messages from the network
	 * 
	 * @return Reference to the queue incoming messages queue
	 */
	public TransferQueue<Object> getInputQueue();
}
